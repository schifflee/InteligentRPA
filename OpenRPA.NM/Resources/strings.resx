<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="activity_click_to_view" xml:space="preserve">
    <value>Double-click to view</value>
  </data>
  <data name="activity_closetab" xml:space="preserve">
    <value>Close Tab</value>
  </data>
  <data name="activity_closetab_tooltip" xml:space="preserve">
    <value>Close the current tab, or close all tabs</value>
  </data>
  <data name="activity_executescript" xml:space="preserve">
    <value>Execute Script</value>
  </data>
  <data name="activity_executescript_tooltip" xml:space="preserve">
    <value>Execute script in the browser, targeting current tab and default frame</value>
  </data>
  <data name="activity_getelement" xml:space="preserve">
    <value>Get Element</value>
  </data>
  <data name="activity_getelement_drop_hint" xml:space="preserve">
    <value>Drop activity</value>
  </data>
  <data name="activity_getelement_highlight" xml:space="preserve">
    <value>Highlight</value>
  </data>
  <data name="activity_getelement_loopaction" xml:space="preserve">
    <value>Loop action</value>
  </data>
  <data name="activity_getelement_loopaction_tooltop" xml:space="preserve">
    <value>Do this, once done processing each result, then reruns the selector and looks for new items</value>
  </data>
  <data name="activity_getelement_open_selector" xml:space="preserve">
    <value>Open Selector</value>
  </data>
  <data name="activity_getelement_tooltip" xml:space="preserve">
    <value>Find an browser element based on selector</value>
  </data>
  <data name="activity_openurl" xml:space="preserve">
    <value>Open URL</value>
  </data>
  <data name="activity_openurl_getcurrent" xml:space="preserve">
    <value>Get current</value>
  </data>
  <data name="activity_openurl_tooltip" xml:space="preserve">
    <value>Open the specefied url in the selected browser</value>
  </data>
  <data name="activity_open_editor" xml:space="preserve">
    <value>Open Editor</value>
  </data>
  <data name="activity_waitfordownload" xml:space="preserve">
    <value>Wait For Download</value>
  </data>
  <data name="activity_waitfordownload_tooltip" xml:space="preserve">
    <value>Waits for a download to complete in a nm supported browser</value>
  </data>
  <data name="activity_waitforready" xml:space="preserve">
    <value>Wait for ready</value>
  </data>
  <data name="activity_waitforready_help" xml:space="preserve">
    <value>Wait for page page to be ready / is not loading</value>
  </data>
  <data name="compensate_for_old_addon" xml:space="preserve">
    <value>Compensate for old extension</value>
  </data>
  <data name="compensate_for_old_addon_help" xml:space="preserve">
    <value>Add pixel compensation for old add</value>
  </data>
  <data name="debug_console_output" xml:space="preserve">
    <value>Debug Console</value>
  </data>
  <data name="debug_console_output_help" xml:space="preserve">
    <value>Write debug informtation to browser console</value>
  </data>
  <data name="plugin_wait_for_tab_after_set_value" xml:space="preserve">
    <value>Wait after set value</value>
  </data>
  <data name="plugin_wait_for_tab_after_set_value_help" xml:space="preserve">
    <value>Wait for tab status to be in ready state after setting a value</value>
  </data>
  <data name="register_old_portname" xml:space="preserve">
    <value>register old portname</value>
  </data>
  <data name="register_old_portname_help" xml:space="preserve">
    <value>Register old browser extension port names </value>
  </data>
  <data name="unique_xpath_ids" xml:space="preserve">
    <value>unique ids</value>
  </data>
  <data name="unique_xpath_ids_help" xml:space="preserve">
    <value>Use on of these attributes as unique id's when creating xpath selectors</value>
  </data>
  <data name="wait_for_tab_click" xml:space="preserve">
    <value>wait for tab</value>
  </data>
  <data name="wait_for_tab_click_help" xml:space="preserve">
    <value>Wait for tab status to be in ready state after clicking a button</value>
  </data>
</root>