<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="activity_auth_hint" xml:space="preserve">
    <value>Nome do Usuário ou Email</value>
  </data>
	<data name="activity_auth_username" xml:space="preserve">
    <value>Nome do Usuário</value>
  </data>
	<data name="activity_exportfile_file" xml:space="preserve">
    <value>URL do Arquivo</value>
  </data>
	<data name="activity_exportfile_file_hint" xml:space="preserve">
    <value>URL do Arquivo para obter dados</value>
  </data>
	<data name="activity_exportfile_key" xml:space="preserve">
    <value>Tecla</value>
  </data>
	<data name="activity_exportfile_key_hint" xml:space="preserve">
    <value>Tecla do API do autenticador de atividade</value>
  </data>
	<data name="activity_exportfile_queue" xml:space="preserve">
    <value>Fila</value>
  </data>
	<data name="activity_exportfile_queue_hint" xml:space="preserve">
    <value>Fila de exportação de dados</value>
  </data>
	<data name="activity_getqueues_key" xml:space="preserve">
    <value>Tecla</value>
  </data>
	<data name="activity_getqueues_key_hint" xml:space="preserve">
    <value>Tecla do API do autenticador de atividade</value>
  </data>
	<data name="activity_getstatus_file" xml:space="preserve">
    <value>URL do Arquivo</value>
  </data>
	<data name="activity_getstatus_file_hint" xml:space="preserve">
    <value>URL do Arquivo para obter status</value>
  </data>
	<data name="activity_getstatus_key" xml:space="preserve">
    <value>Tecla</value>
  </data>
	<data name="activity_getstatus_key_hint" xml:space="preserve">
    <value>Tecla do API do autenticador de atividade</value>
  </data>
	<data name="activity_uploadfile_filename" xml:space="preserve">
    <value>Nome do Arquivo</value>
  </data>
	<data name="activity_uploadfile_filename_hint" xml:space="preserve">
    <value>Arquivo a ser carregado na fila</value>
  </data>
	<data name="activity_uploadfile_key" xml:space="preserve">
    <value>Tecla</value>
  </data>
	<data name="activity_uploadfile_key_hint" xml:space="preserve">
    <value>Tecla do API do autenticador de atividade</value>
  </data>
	<data name="activity_uploadfile_queue" xml:space="preserve">
    <value>Fila</value>
  </data>
	<data name="activity_uploadfile_queue_hint" xml:space="preserve">
    <value>Fila onde será carregado o arquivo</value>
  </data>
	<data name="activity_waitforfile_file" xml:space="preserve">
    <value>URL do Arquivo</value>
  </data>
	<data name="activity_waitforfile_file_hint" xml:space="preserve">
    <value>URL do Arquivo para aguardar resposta</value>
  </data>
	<data name="activity_waitforfile_key" xml:space="preserve">
    <value>Tecla</value>
  </data>
	<data name="activity_waitforfile_key_hint" xml:space="preserve">
    <value>Tecla do API do autenticador de atividade</value>
  </data>
	<data name="activity_waitforfile_status" xml:space="preserve">
    <value>Status</value>
  </data>
	<data name="activity_waitforfile_status_hint" xml:space="preserve">
    <value>Status de Espera por</value>
  </data>
	<data name="activity_auth" xml:space="preserve">
		<value>Autorização</value>
	</data>
	<data name="activity_auth_tooltip" xml:space="preserve">
		<value>Autentique-se ao serviço Rossum e obtenha seu Token/Chave</value>
	</data>
	<data name="activity_exportfiledata" xml:space="preserve">
		<value>Exportar arquivo de dados</value>
	</data>
	<data name="activity_exportfiledata_tooltip" xml:space="preserve">
		<value>Obter dados a partir de uma nota fiscal, só funciona a partir do momento em que o status do arquivo for Exportado</value>
	</data>
	<data name="activity_getfilestatus" xml:space="preserve">
		<value>Obter Status do Arquivo</value>
	</data>
	<data name="activity_getfilestatus_tooltip" xml:space="preserve">
		<value>"Obter status de um arquivo na fila, pode ser:
importando - O documento está sendo processado pelo AI Core Engine para extração de dados; estado inicial do documento.
importação_falhou - Falha na importação, devido a um arquivo de documento malformado por exemplo.
aguardando_validação - A etapa de extração inicial foi concluída e o documento está aguardando a validação do usuário.
revisão - O documento está sendo validado na interface do usuário.
exportando - O documento está validado e agora aguarda a conclusão do salvamento do conector.
exportado - o documento é validado e passou com êxito em todos os ganchos; esse é o estado terminal típico de um documento.
exportação_falhou - Quando o conector retornou um erro.
adiado - o operador optou por adiar o documento em vez de exportá-lo.
excluído - Quando o documento foi excluído pelo usuário.
eliminado completamente - Somente os metadados foram preservados após a exclusão ".</value>
	</data>
	<data name="activity_getqueues" xml:space="preserve">
		<value>Obter filas</value>
	</data>
	<data name="activity_getqueues_tooltip" xml:space="preserve">
		<value>Para obter uma lista de filas do rossum, é necessário fazer o upload de um arquivo para uma fila com configurações variadas definidas no site</value>
	</data>
	<data name="activity_uploadfile" xml:space="preserve">
		<value>Envio de arquivo</value>
	</data>
	<data name="activity_uploadfile_tooltip" xml:space="preserve">
		<value>Enviar arquivo para uma fila do Rossum</value>
	</data>
	<data name="activity_waitforfilestatus" xml:space="preserve">
		<value>Aguarde pelo status do arquivo</value>
	</data>
	<data name="activity_waitforfilestatus_tooltip" xml:space="preserve">
		<value>Tornar o fluxo de trabalho ocioso enquanto aguarda o arquivo entrar no status especificado</value>
	</data>
</root>