<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="activity_auth" xml:space="preserve">
    <value>授权</value>
  </data>
  <data name="activity_auth_hint" xml:space="preserve">
    <value>用户名或邮箱</value>
  </data>
  <data name="activity_auth_tooltip" xml:space="preserve">
    <value>针对Rossum服务进行身份验证并获得令牌/密钥</value>
  </data>
  <data name="activity_auth_username" xml:space="preserve">
    <value>用户名</value>
  </data>
  <data name="activity_exportfiledata" xml:space="preserve">
    <value>导出文件数据</value>
  </data>
  <data name="activity_exportfiledata_tooltip" xml:space="preserve">
    <value>获取发票中提取的数据的日期，仅在文件状态为导出状态时有效</value>
  </data>
  <data name="activity_exportfile_file" xml:space="preserve">
    <value>文件URL</value>
  </data>
  <data name="activity_exportfile_file_hint" xml:space="preserve">
    <value>要从中获取数据的文件的URL</value>
  </data>
  <data name="activity_exportfile_key" xml:space="preserve">
    <value>秘钥</value>
  </data>
  <data name="activity_exportfile_key_hint" xml:space="preserve">
    <value>来自身份验证活动的API密钥</value>
  </data>
  <data name="activity_exportfile_queue" xml:space="preserve">
    <value>队列</value>
  </data>
  <data name="activity_exportfile_queue_hint" xml:space="preserve">
    <value>用于导出数据的队列</value>
  </data>
  <data name="activity_getfilestatus" xml:space="preserve">
    <value>获得文件状态</value>
  </data>
  <data name="activity_getfilestatus_tooltip" xml:space="preserve">
    <value>获取队列中文件的状态，可以是
importing-AI核心引擎正在处理文档以提取数据； 文档的初始状态。
failed_import-导入失败，例如 由于文档文件格式错误。
to_review-初始提取步骤已完成，文档正在等待用户验证。
reviewing-文档正在用户界面中进行验证。
exporting-文档已经过验证，正在等待连接器保存调用完成。
exported-文档已验证并成功通过了所有挂钩； 这是文档的典型终端状态。
failed_export-连接器返回错误时。
postponed-操作员已选择推迟文档而不是导出文档。
deleted-用户删除文档时。
purged-删除后仅保留元数据。</value>
  </data>
  <data name="activity_getqueues" xml:space="preserve">
    <value>获得队列</value>
  </data>
  <data name="activity_getqueues_key" xml:space="preserve">
    <value>秘钥</value>
  </data>
  <data name="activity_getqueues_key_hint" xml:space="preserve">
    <value>来自身份验证活动的API密钥</value>
  </data>
  <data name="activity_getqueues_tooltip" xml:space="preserve">
    <value>从rossum获取队列列表，必须将文件上传到通过网站设置了杂项设置的队列</value>
  </data>
  <data name="activity_getstatus_file" xml:space="preserve">
    <value>文件URL</value>
  </data>
  <data name="activity_getstatus_file_hint" xml:space="preserve">
    <value>要从中获取文件的状态的URL</value>
  </data>
  <data name="activity_getstatus_key" xml:space="preserve">
    <value>秘钥</value>
  </data>
  <data name="activity_getstatus_key_hint" xml:space="preserve">
    <value>来自身份验证活动的API密钥</value>
  </data>
  <data name="activity_uploadfile" xml:space="preserve">
    <value>上传文件</value>
  </data>
  <data name="activity_uploadfile_filename" xml:space="preserve">
    <value>文件名</value>
  </data>
  <data name="activity_uploadfile_filename_hint" xml:space="preserve">
    <value>要上传到队列的文件</value>
  </data>
  <data name="activity_uploadfile_key" xml:space="preserve">
    <value>秘钥</value>
  </data>
  <data name="activity_uploadfile_key_hint" xml:space="preserve">
    <value>来自身份验证活动的API密钥</value>
  </data>
  <data name="activity_uploadfile_queue" xml:space="preserve">
    <value>队列</value>
  </data>
  <data name="activity_uploadfile_queue_hint" xml:space="preserve">
    <value>将文件上传到队列</value>
  </data>
  <data name="activity_uploadfile_tooltip" xml:space="preserve">
    <value>上传文件到Rossum 队列</value>
  </data>
  <data name="activity_waitforfilestatus" xml:space="preserve">
    <value>等待文件状态</value>
  </data>
  <data name="activity_waitforfilestatus_tooltip" xml:space="preserve">
    <value>在等待文件进入指定状态时使工作流空闲</value>
  </data>
  <data name="activity_waitforfile_file" xml:space="preserve">
    <value>文件URL</value>
  </data>
  <data name="activity_waitforfile_file_hint" xml:space="preserve">
    <value>等待文件的URL</value>
  </data>
  <data name="activity_waitforfile_key" xml:space="preserve">
    <value>秘钥</value>
  </data>
  <data name="activity_waitforfile_key_hint" xml:space="preserve">
    <value>来自身份验证活动的API密钥</value>
  </data>
  <data name="activity_waitforfile_status" xml:space="preserve">
    <value>状态</value>
  </data>
  <data name="activity_waitforfile_status_hint" xml:space="preserve">
    <value>需要等待的状态</value>
  </data>
</root>